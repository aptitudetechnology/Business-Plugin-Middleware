version: '3.8'

services:
  # Main application
  middleware:
    build: .
    container_name: business-plugin-middleware
    ports:
      - "5000:5000"
    volumes:
      # Configuration
      - ./config:/app/config
      # Data persistence
      - ./data:/app/data
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      # Plugin development (optional)
      - ./plugins:/app/plugins
    environment:
      - FLASK_ENV=production
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-this}
      - DEBUG=${DEBUG:-False}
    depends_on:
      - redis
    networks:
      - middleware-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching and background tasks (optional)
  redis:
    image: redis:7-alpine
    container_name: middleware-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - middleware-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Paperless-NGX document management system
  paperless-ngx:
    image: ghcr.io/paperless-ngx/paperless-ngx:latest
    container_name: paperless-ngx
    ports:
      - "8000:8000"
    environment:
      PAPERLESS_URL: http://localhost:8000
      PAPERLESS_SECRET_KEY: ${PAPERLESS_SECRET_KEY:-change-me-in-production}
      PAPERLESS_TIME_ZONE: ${PAPERLESS_TIMEZONE:-UTC}
      PAPERLESS_OCR_LANGUAGE: eng
      PAPERLESS_REDIS: redis://redis:6379
      PAPERLESS_DBHOST: paperless-db
      PAPERLESS_DBNAME: paperless
      PAPERLESS_DBUSER: paperless
      PAPERLESS_DBPASS: paperless
    volumes:
      - paperless_data:/usr/src/paperless/data
      - paperless_media:/usr/src/paperless/media
      - paperless_export:/usr/src/paperless/export
      - paperless_consume:/usr/src/paperless/consume
    depends_on:
      - redis
      - paperless-db
    networks:
      - middleware-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # PostgreSQL for Paperless-NGX
  paperless-db:
    image: postgres:15-alpine
    container_name: paperless-db
    environment:
      POSTGRES_DB: paperless
      POSTGRES_USER: paperless
      POSTGRES_PASSWORD: paperless
    volumes:
      - paperless_db_data:/var/lib/postgresql/data
    networks:
      - middleware-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U paperless"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL database (alternative to SQLite for production)
  # Uncomment if you want to use PostgreSQL instead of SQLite
  # postgres:
  #   image: postgres:15-alpine
  #   container_name: middleware-postgres
  #   environment:
  #     POSTGRES_DB: ${POSTGRES_DB:-middleware}
  #     POSTGRES_USER: ${POSTGRES_USER:-middleware}
  #     POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-middleware_password}
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   networks:
  #     - middleware-network
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-middleware}"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3

  # Nginx reverse proxy (optional)
  # nginx:
  #   image: nginx:alpine
  #   container_name: middleware-nginx
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/nginx.conf:ro
  #     - ./certs:/etc/nginx/certs:ro
  #   depends_on:
  #     - middleware
  #   networks:
  #     - middleware-network
  #   restart: unless-stopped

networks:
  middleware-network:
    driver: bridge

volumes:
  redis_data:
  paperless_data:
  paperless_media:
  paperless_export:
  paperless_consume:
  paperless_db_data:
  # postgres_data:  # Uncomment if using PostgreSQL
