name: CI Pipeline - Business Plugin Middleware

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

env:
  DOCKER_IMAGE_NAME: business-plugin-middleware
  DOCKER_HUB_REPO: caston81/business-plugin-middleware

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker Image
        # Build the Docker image using the Dockerfile in the 'docker' directory.
        # The context is the current directory ('.').
        run: docker build -t ${{ env.DOCKER_IMAGE_NAME }} -f docker/Dockerfile .

      - name: Run Unit Tests in Docker Container
        # Runs unit tests inside the newly built Docker container.
        # - --rm: Automatically remove the container when it exits.
        # - --entrypoint /bin/bash: Overrides the default entrypoint to run bash commands.
        # - -v ${{ github.workspace }}:/app: Mounts the GitHub workspace into the container at /app.
        # - -w /app: Sets the working directory inside the container to /app.
        # - -c "..." : Executes the given command string.
        run: |
          docker run --rm \
            --entrypoint /bin/bash \
            -v ${{ github.workspace }}:/app \
            -w /app \
            ${{ env.DOCKER_IMAGE_NAME }} \
            -c "pip install pytest && pytest tests/ -v"

      - name: Test Plugin System Basic Import
        # Verifies that the core plugin system can be imported without errors.
        run: |
          docker run --rm \
            --entrypoint /bin/bash \
            -v ${{ github.workspace }}:/app \
            -w /app \
            ${{ env.DOCKER_IMAGE_NAME }} \
            -c "python -c 'from core.plugin_manager import PluginManager; print(\"Plugin system test passed\")'"

      - name: Log in to Docker Hub
        # Only logs in if the event is a 'push' to 'main' or 'develop' branches.
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Generate Docker Tags
        # Generates appropriate Docker tags based on the branch.
        # 'main' branch gets 'latest' and SHA.
        # 'develop' branch gets 'develop' and 'develop-SHA'.
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
        id: meta
        run: |
          if [[ $GITHUB_REF == refs/heads/main ]]; then
            echo "tags=${{ env.DOCKER_HUB_REPO }}:latest,${{ env.DOCKER_HUB_REPO }}:${{ github.sha }}" >> $GITHUB_OUTPUT
          else
            echo "tags=${{ env.DOCKER_HUB_REPO }}:develop,${{ env.DOCKER_HUB_REPO }}:develop-${{ github.sha }}" >> $GITHUB_OUTPUT
          fi

      - name: Tag and Push Docker Image to Docker Hub
        # Tags the built Docker image and pushes it to Docker Hub.
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
        run: |
          IFS=',' read -ra TAGS <<< "${{ steps.meta.outputs.tags }}"
          for tag in "${TAGS[@]}"; do
            docker tag ${{ env.DOCKER_IMAGE_NAME }} $tag
            docker push $tag
            echo "Pushed: $tag"

  plugin-validation:
    runs-on: ubuntu-latest
    needs: build-and-test # This job depends on 'build-and-test' completing successfully.

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        # Installs Python dependencies from requirements.txt.
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Validate Plugin Structure
        # Python script to check for the 'plugins' directory and '__init__.py' files.
        run: |
          python -c "
          import os
          import sys
          sys.path.insert(0, '.')

          # Check if plugins directory exists
          plugins_dir = 'plugins'
          if os.path.exists(plugins_dir):
              print(f'✓ Plugins directory found: {plugins_dir}')

              # List available plugins
              plugins = [d for d in os.listdir(plugins_dir)
                         if os.path.isdir(os.path.join(plugins_dir, d)) and not d.startswith('.')]
              print(f'✓ Found {len(plugins)} plugin directories: {plugins}')

              # Validate each plugin has required files
              for plugin in plugins:
                  plugin_path = os.path.join(plugins_dir, plugin)
                  init_file = os.path.join(plugin_path, '__init__.py')
                  if os.path.exists(init_file):
                      print(f'✓ Plugin {plugin} has __init__.py')
                  else:
                      print(f'✗ Plugin {plugin} missing __init__.py')
                      sys.exit(1)
          else:
              print('ℹ No plugins directory found - this is okay for base installation')

          print('✓ Plugin validation completed')
          "

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test # This job depends on 'build-and-test' completing successfully.

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        # Log in to Docker Hub to pull the image built in the previous job.
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Determine Docker Image Tag to Scan
        # Determine the correct tag to pull based on the branch.
        id: image_tag
        run: |
          if [[ $GITHUB_REF == refs/heads/main ]]; then
            echo "tag=${{ env.DOCKER_HUB_REPO }}:latest" >> $GITHUB_OUTPUT
          else
            echo "tag=${{ env.DOCKER_HUB_REPO }}:develop" >> $GITHUB_OUTPUT
          fi

      - name: Pull Docker Image for Scan
        # Pull the Docker image that was pushed by the 'build-and-test' job.
        run: docker pull ${{ steps.image_tag.outputs.tag }}

      - name: Run Security Scan with Trivy
        # Runs Trivy scan on the *pulled* Docker image.
        # Outputs results in SARIF format to 'trivy-results.sarif'.
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.image_tag.outputs.tag }} # Use the pulled image tag
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        # Uploads the SARIF file generated by Trivy to the GitHub Security tab.
        # The 'if: always()' ensures this step runs even if previous steps fail,
        # so you always get security scan results.
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
